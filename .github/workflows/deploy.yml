# .github/workflows/deploy.yml
name: Deploy AI News to Cloudflare & GitHub Pages

on:
  schedule:
    - cron: '0 0 * * *' # 每天UTC 0点 (北京时间8点)
  workflow_dispatch:
  push:
    branches:
      - main

# 设置GITHUB_TOKEN的权限
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
concurrency:
  group: "pages"
  cancel-in-progress: false

# 默认设置
defaults:
  run:
    shell: bash

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-24.04
    env:
      HUGO_VERSION: 0.148.1
    steps:
      # 步骤1: 安装Hugo CLI
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      
      # 步骤2: 检出网站代码仓库
      - name: Checkout website repo
        uses: actions/checkout@v4  # 使用 v4 标签
        with:
          submodules: recursive
          fetch-depth: 0

      # 步骤3: 检出新闻源仓库
      - name: Checkout news source repo
        uses: actions/checkout@v4  # 使用 v4 标签
        with:
          repository: 'YYvanYang/ai-news-vault'
          path: 'source-news'
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}  # 私有仓库必须配置

      # 步骤4: 同步新闻文件
      - name: Sync markdown files
        run: |
          chmod +x ./.github/scripts/sync-news.sh
          ./.github/scripts/sync-news.sh

      # 步骤5: 设置Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5  # 使用最新版本

      # 步骤6: 构建网站
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"

      # 步骤7: 上传 GitHub Pages 构建产物
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v4  # Pages 专用 action 保持 v3
        with:
          path: ./public

  # 部署到GitHub Pages
  deploy-gh-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # 使用最新版本

  # 部署到Cloudflare Worker
  deploy-cf-worker:
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    env:
      HUGO_VERSION: 0.148.1
    steps:
      # 步骤1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      # 步骤2: 安装 Hugo
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb

      # 步骤3: 检出新闻源仓库
      - name: Checkout news source repo
        uses: actions/checkout@v4
        with:
          repository: 'YYvanYang/ai-news-vault'
          path: 'source-news'
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      # 步骤4: 同步新闻文件
      - name: Sync markdown files
        run: |
          chmod +x ./.github/scripts/sync-news.sh
          ./.github/scripts/sync-news.sh

      # 步骤5: 构建网站
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --gc \
            --minify
          echo "=== Contents of public directory ==="
          ls -la public/

      # 步骤6: 设置 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 步骤7: 安装依赖
      - name: Install dependencies
        run: npm ci

      # 步骤8: 部署到 Cloudflare Worker
      - name: Deploy to Cloudflare Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}